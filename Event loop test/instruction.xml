<?xml version="1.0" encoding="utf-8"?>
<InstructionData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <DateTime>133902740798280995</DateTime>
  <GameVersion>0.2.5499.24517</GameVersion>
  <Title>Event loop test</Title>
  <Description>v0.6â€‹</Description>
  <Author>Kdandikk</Author>
  <WorkshopFileHandle>0</WorkshopFileHandle>
  <Instructions>alias time r14
alias spCopy r15
alias valFn0 r11 #data for doAFlip
move valFn0 1
alias valFn1 r12 #data for doAFlip2
move valFn1 0
s db Setting 11111111 # TODO: remove logging

lbn time HASH("StopWatch") HASH("UTC") Time Minimum # initial time

add r0 time 4 #timeFn0 # define initial times
push r0
move spCopy sp
sll sp sp 5
#add sp sp 31 # SpOffsetRa - 2
push doAFlip
move sp spCopy

add r0 time 0 #timeFn1
push r0
move spCopy sp
sll sp sp 5
#add sp sp 31 # SpOffsetRa - 2
push doAFlip2
move sp spCopy

add r0 time 0 #timeFn1
push r0
move spCopy sp
sll sp sp 5
#add sp sp 31 # SpOffsetRa - 2
push doAFlip2
move sp spCopy

MainLoop:
lbn time HASH("StopWatch") HASH("UTC") Time Minimum #update with current time every loop

#mod r1 time 60
#s db Setting r1
move spCopy sp

eventLoop:
pop r0 #
brlt time r0 7
move r13 sp
sll sp sp 5
add sp sp 33
peek r0

move r1 12
add sp sp 8
LoadSubroutineMem:
pop rr1
sub r1 r1 1
bgeal r1 5 LoadSubroutineMem

jal r0 # returns how much delay in @r0
add r0 time r0

move r1 5
SaveSubroutineMem:
push rr1
add r1 r1 1
bleal r1 12 SaveSubroutineMem

move sp r13
poke sp r0
bnez sp eventLoop

move sp spCopy

#mod r1 time 60
#round r1 r1
#s db Setting r0
j MainLoop


doAFlip:
add valFn0 valFn0 2
s db Setting valFn0 # TODO: remove logging

ld r0 $1D07E Setting # compute next time
j ra #END doAFlip

doAFlip2:
add valFn1 valFn1 10
s db Setting valFn1 # TODO: remove logging

move r0 5 # compute next time

j ra#END doAFlip2</Instructions>
</InstructionData>